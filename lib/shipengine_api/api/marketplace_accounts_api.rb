=begin
#ShipEngine API

#ShipEngine™ is the world's best multi-carrier shipping API, with more than 20 supported shipping carriers.  You can easily get and compare shipping rates, print labels, track your shipments, and validate addresses anywhere in the world.  ### Worldwide Major Carrier Support Access the top global carriers in minutes—instead of weeks. Simply [connect your existing carrier accounts](https://docs.shipengine.com/docs/setup-a-carrier) in the API dashboard, and then [begin creating labels](https://docs.shipengine.com/docs/use-a-specific-service).  ### Real-Time Tracking [Track packages](https://docs.shipengine.com/docs/track-a-package) across any of our 20+ supported carrier accounts and create tracking events to keep your customers up-to-date. Easily integrate real-time tracking information for shipments into your app, email, or SMS.  ### Get Rates Across Carriers Make sure you ship as cost-effectively as possible by [quickly comparing rates](https://docs.shipengine.com/docs/get-shipping-rates) using the ShipEngine Rates API. As long as you have the carrier connected to your account, you'll be able to see and compare different rates and services.  ### Global Address Validation No matter your shipping volume, failed deliveries and address change surcharges cut into your bottom line and damage perception with customers. Our address validation services ensure your packages make it to the right place the first time. [Learn how to leverage our address validation services here.](https://docs.shipengine.com/docs/address-validation)  ShipEngine supports address validation for over 180 countries, including the United States, Canada, Great Britain, Australia, Germany, France, Norway, Spain, Sweden, Israel, Italy, and more. 

OpenAPI spec version: 1.0.0
Contact: sales@shipengine.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.0-SNAPSHOT

=end

require 'uri'

module ShipEngineApi
  class MarketplaceAccountsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # amazon_account.deactivate
    # 
    # @param store_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def v_beta_connections_marketplaces_amazon_deactivate_by_store_id_put(store_id, opts = {})
      v_beta_connections_marketplaces_amazon_deactivate_by_store_id_put_with_http_info(store_id, opts)
      nil
    end

    # amazon_account.deactivate
    # 
    # @param store_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def v_beta_connections_marketplaces_amazon_deactivate_by_store_id_put_with_http_info(store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MarketplaceAccountsApi.v_beta_connections_marketplaces_amazon_deactivate_by_store_id_put ...'
      end
      # verify the required parameter 'store_id' is set
      if @api_client.config.client_side_validation && store_id.nil?
        fail ArgumentError, "Missing the required parameter 'store_id' when calling MarketplaceAccountsApi.v_beta_connections_marketplaces_amazon_deactivate_by_store_id_put"
      end
      # resource path
      local_var_path = '/v-beta/connections/marketplaces/amazon/{store_id}/deactivate'.sub('{' + 'store_id' + '}', store_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api-key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MarketplaceAccountsApi#v_beta_connections_marketplaces_amazon_deactivate_by_store_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # amazon_account.connect
    # 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [ConnectMarketplaceResponseBody]
    def v_beta_connections_marketplaces_amazon_post(body, opts = {})
      data, _status_code, _headers = v_beta_connections_marketplaces_amazon_post_with_http_info(body, opts)
      data
    end

    # amazon_account.connect
    # 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConnectMarketplaceResponseBody, Fixnum, Hash)>] ConnectMarketplaceResponseBody data, response status code and response headers
    def v_beta_connections_marketplaces_amazon_post_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MarketplaceAccountsApi.v_beta_connections_marketplaces_amazon_post ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling MarketplaceAccountsApi.v_beta_connections_marketplaces_amazon_post"
      end
      # resource path
      local_var_path = '/v-beta/connections/marketplaces/amazon'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['api-key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ConnectMarketplaceResponseBody')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MarketplaceAccountsApi#v_beta_connections_marketplaces_amazon_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # amazon_account.reactivate
    # 
    # @param store_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def v_beta_connections_marketplaces_amazon_reactivate_by_store_id_put(store_id, opts = {})
      v_beta_connections_marketplaces_amazon_reactivate_by_store_id_put_with_http_info(store_id, opts)
      nil
    end

    # amazon_account.reactivate
    # 
    # @param store_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def v_beta_connections_marketplaces_amazon_reactivate_by_store_id_put_with_http_info(store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MarketplaceAccountsApi.v_beta_connections_marketplaces_amazon_reactivate_by_store_id_put ...'
      end
      # verify the required parameter 'store_id' is set
      if @api_client.config.client_side_validation && store_id.nil?
        fail ArgumentError, "Missing the required parameter 'store_id' when calling MarketplaceAccountsApi.v_beta_connections_marketplaces_amazon_reactivate_by_store_id_put"
      end
      # resource path
      local_var_path = '/v-beta/connections/marketplaces/amazon/{store_id}/reactivate'.sub('{' + 'store_id' + '}', store_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api-key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MarketplaceAccountsApi#v_beta_connections_marketplaces_amazon_reactivate_by_store_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # amazon_account.update_settings
    # 
    # @param store_id 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def v_beta_connections_marketplaces_amazon_settings_by_store_id_put(store_id, body, opts = {})
      v_beta_connections_marketplaces_amazon_settings_by_store_id_put_with_http_info(store_id, body, opts)
      nil
    end

    # amazon_account.update_settings
    # 
    # @param store_id 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def v_beta_connections_marketplaces_amazon_settings_by_store_id_put_with_http_info(store_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MarketplaceAccountsApi.v_beta_connections_marketplaces_amazon_settings_by_store_id_put ...'
      end
      # verify the required parameter 'store_id' is set
      if @api_client.config.client_side_validation && store_id.nil?
        fail ArgumentError, "Missing the required parameter 'store_id' when calling MarketplaceAccountsApi.v_beta_connections_marketplaces_amazon_settings_by_store_id_put"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling MarketplaceAccountsApi.v_beta_connections_marketplaces_amazon_settings_by_store_id_put"
      end
      # resource path
      local_var_path = '/v-beta/connections/marketplaces/amazon/{store_id}/settings'.sub('{' + 'store_id' + '}', store_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['api-key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MarketplaceAccountsApi#v_beta_connections_marketplaces_amazon_settings_by_store_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # amazon_account.test
    # 
    # @param store_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def v_beta_connections_marketplaces_amazon_test_by_store_id_get(store_id, opts = {})
      v_beta_connections_marketplaces_amazon_test_by_store_id_get_with_http_info(store_id, opts)
      nil
    end

    # amazon_account.test
    # 
    # @param store_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def v_beta_connections_marketplaces_amazon_test_by_store_id_get_with_http_info(store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MarketplaceAccountsApi.v_beta_connections_marketplaces_amazon_test_by_store_id_get ...'
      end
      # verify the required parameter 'store_id' is set
      if @api_client.config.client_side_validation && store_id.nil?
        fail ArgumentError, "Missing the required parameter 'store_id' when calling MarketplaceAccountsApi.v_beta_connections_marketplaces_amazon_test_by_store_id_get"
      end
      # resource path
      local_var_path = '/v-beta/connections/marketplaces/amazon/{store_id}/test'.sub('{' + 'store_id' + '}', store_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api-key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MarketplaceAccountsApi#v_beta_connections_marketplaces_amazon_test_by_store_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # channel_advisor_account.deactivate
    # 
    # @param store_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def v_beta_connections_marketplaces_channeladvisor_deactivate_by_store_id_put(store_id, opts = {})
      v_beta_connections_marketplaces_channeladvisor_deactivate_by_store_id_put_with_http_info(store_id, opts)
      nil
    end

    # channel_advisor_account.deactivate
    # 
    # @param store_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def v_beta_connections_marketplaces_channeladvisor_deactivate_by_store_id_put_with_http_info(store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MarketplaceAccountsApi.v_beta_connections_marketplaces_channeladvisor_deactivate_by_store_id_put ...'
      end
      # verify the required parameter 'store_id' is set
      if @api_client.config.client_side_validation && store_id.nil?
        fail ArgumentError, "Missing the required parameter 'store_id' when calling MarketplaceAccountsApi.v_beta_connections_marketplaces_channeladvisor_deactivate_by_store_id_put"
      end
      # resource path
      local_var_path = '/v-beta/connections/marketplaces/channeladvisor/{store_id}/deactivate'.sub('{' + 'store_id' + '}', store_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api-key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MarketplaceAccountsApi#v_beta_connections_marketplaces_channeladvisor_deactivate_by_store_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # channel_advisor_account.connect
    # 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [ConnectMarketplaceResponseBody]
    def v_beta_connections_marketplaces_channeladvisor_post(body, opts = {})
      data, _status_code, _headers = v_beta_connections_marketplaces_channeladvisor_post_with_http_info(body, opts)
      data
    end

    # channel_advisor_account.connect
    # 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConnectMarketplaceResponseBody, Fixnum, Hash)>] ConnectMarketplaceResponseBody data, response status code and response headers
    def v_beta_connections_marketplaces_channeladvisor_post_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MarketplaceAccountsApi.v_beta_connections_marketplaces_channeladvisor_post ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling MarketplaceAccountsApi.v_beta_connections_marketplaces_channeladvisor_post"
      end
      # resource path
      local_var_path = '/v-beta/connections/marketplaces/channeladvisor'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['api-key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ConnectMarketplaceResponseBody')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MarketplaceAccountsApi#v_beta_connections_marketplaces_channeladvisor_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # channel_advisor_account.reactivate
    # 
    # @param store_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def v_beta_connections_marketplaces_channeladvisor_reactivate_by_store_id_put(store_id, opts = {})
      v_beta_connections_marketplaces_channeladvisor_reactivate_by_store_id_put_with_http_info(store_id, opts)
      nil
    end

    # channel_advisor_account.reactivate
    # 
    # @param store_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def v_beta_connections_marketplaces_channeladvisor_reactivate_by_store_id_put_with_http_info(store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MarketplaceAccountsApi.v_beta_connections_marketplaces_channeladvisor_reactivate_by_store_id_put ...'
      end
      # verify the required parameter 'store_id' is set
      if @api_client.config.client_side_validation && store_id.nil?
        fail ArgumentError, "Missing the required parameter 'store_id' when calling MarketplaceAccountsApi.v_beta_connections_marketplaces_channeladvisor_reactivate_by_store_id_put"
      end
      # resource path
      local_var_path = '/v-beta/connections/marketplaces/channeladvisor/{store_id}/reactivate'.sub('{' + 'store_id' + '}', store_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api-key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MarketplaceAccountsApi#v_beta_connections_marketplaces_channeladvisor_reactivate_by_store_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # channel_advisor_account.update_settings
    # 
    # @param store_id 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def v_beta_connections_marketplaces_channeladvisor_settings_by_store_id_put(store_id, body, opts = {})
      v_beta_connections_marketplaces_channeladvisor_settings_by_store_id_put_with_http_info(store_id, body, opts)
      nil
    end

    # channel_advisor_account.update_settings
    # 
    # @param store_id 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def v_beta_connections_marketplaces_channeladvisor_settings_by_store_id_put_with_http_info(store_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MarketplaceAccountsApi.v_beta_connections_marketplaces_channeladvisor_settings_by_store_id_put ...'
      end
      # verify the required parameter 'store_id' is set
      if @api_client.config.client_side_validation && store_id.nil?
        fail ArgumentError, "Missing the required parameter 'store_id' when calling MarketplaceAccountsApi.v_beta_connections_marketplaces_channeladvisor_settings_by_store_id_put"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling MarketplaceAccountsApi.v_beta_connections_marketplaces_channeladvisor_settings_by_store_id_put"
      end
      # resource path
      local_var_path = '/v-beta/connections/marketplaces/channeladvisor/{store_id}/settings'.sub('{' + 'store_id' + '}', store_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['api-key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MarketplaceAccountsApi#v_beta_connections_marketplaces_channeladvisor_settings_by_store_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # channel_advisor_account.test
    # 
    # @param store_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def v_beta_connections_marketplaces_channeladvisor_test_by_store_id_get(store_id, opts = {})
      v_beta_connections_marketplaces_channeladvisor_test_by_store_id_get_with_http_info(store_id, opts)
      nil
    end

    # channel_advisor_account.test
    # 
    # @param store_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def v_beta_connections_marketplaces_channeladvisor_test_by_store_id_get_with_http_info(store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MarketplaceAccountsApi.v_beta_connections_marketplaces_channeladvisor_test_by_store_id_get ...'
      end
      # verify the required parameter 'store_id' is set
      if @api_client.config.client_side_validation && store_id.nil?
        fail ArgumentError, "Missing the required parameter 'store_id' when calling MarketplaceAccountsApi.v_beta_connections_marketplaces_channeladvisor_test_by_store_id_get"
      end
      # resource path
      local_var_path = '/v-beta/connections/marketplaces/channeladvisor/{store_id}/test'.sub('{' + 'store_id' + '}', store_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api-key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MarketplaceAccountsApi#v_beta_connections_marketplaces_channeladvisor_test_by_store_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # ebay_account.connect_access_token
    # 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [ConnectMarketplaceResponseBody]
    def v_beta_connections_marketplaces_ebay_access_token_post(body, opts = {})
      data, _status_code, _headers = v_beta_connections_marketplaces_ebay_access_token_post_with_http_info(body, opts)
      data
    end

    # ebay_account.connect_access_token
    # 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConnectMarketplaceResponseBody, Fixnum, Hash)>] ConnectMarketplaceResponseBody data, response status code and response headers
    def v_beta_connections_marketplaces_ebay_access_token_post_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MarketplaceAccountsApi.v_beta_connections_marketplaces_ebay_access_token_post ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling MarketplaceAccountsApi.v_beta_connections_marketplaces_ebay_access_token_post"
      end
      # resource path
      local_var_path = '/v-beta/connections/marketplaces/ebay/access_token'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['api-key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ConnectMarketplaceResponseBody')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MarketplaceAccountsApi#v_beta_connections_marketplaces_ebay_access_token_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # ebay_account.deactivate
    # 
    # @param store_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def v_beta_connections_marketplaces_ebay_deactivate_by_store_id_put(store_id, opts = {})
      v_beta_connections_marketplaces_ebay_deactivate_by_store_id_put_with_http_info(store_id, opts)
      nil
    end

    # ebay_account.deactivate
    # 
    # @param store_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def v_beta_connections_marketplaces_ebay_deactivate_by_store_id_put_with_http_info(store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MarketplaceAccountsApi.v_beta_connections_marketplaces_ebay_deactivate_by_store_id_put ...'
      end
      # verify the required parameter 'store_id' is set
      if @api_client.config.client_side_validation && store_id.nil?
        fail ArgumentError, "Missing the required parameter 'store_id' when calling MarketplaceAccountsApi.v_beta_connections_marketplaces_ebay_deactivate_by_store_id_put"
      end
      # resource path
      local_var_path = '/v-beta/connections/marketplaces/ebay/{store_id}/deactivate'.sub('{' + 'store_id' + '}', store_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api-key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MarketplaceAccountsApi#v_beta_connections_marketplaces_ebay_deactivate_by_store_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # ebay_account.reactivate
    # 
    # @param store_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def v_beta_connections_marketplaces_ebay_reactivate_by_store_id_put(store_id, opts = {})
      v_beta_connections_marketplaces_ebay_reactivate_by_store_id_put_with_http_info(store_id, opts)
      nil
    end

    # ebay_account.reactivate
    # 
    # @param store_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def v_beta_connections_marketplaces_ebay_reactivate_by_store_id_put_with_http_info(store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MarketplaceAccountsApi.v_beta_connections_marketplaces_ebay_reactivate_by_store_id_put ...'
      end
      # verify the required parameter 'store_id' is set
      if @api_client.config.client_side_validation && store_id.nil?
        fail ArgumentError, "Missing the required parameter 'store_id' when calling MarketplaceAccountsApi.v_beta_connections_marketplaces_ebay_reactivate_by_store_id_put"
      end
      # resource path
      local_var_path = '/v-beta/connections/marketplaces/ebay/{store_id}/reactivate'.sub('{' + 'store_id' + '}', store_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api-key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MarketplaceAccountsApi#v_beta_connections_marketplaces_ebay_reactivate_by_store_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # ebay_account.update_settings
    # 
    # @param store_id 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def v_beta_connections_marketplaces_ebay_settings_by_store_id_put(store_id, body, opts = {})
      v_beta_connections_marketplaces_ebay_settings_by_store_id_put_with_http_info(store_id, body, opts)
      nil
    end

    # ebay_account.update_settings
    # 
    # @param store_id 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def v_beta_connections_marketplaces_ebay_settings_by_store_id_put_with_http_info(store_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MarketplaceAccountsApi.v_beta_connections_marketplaces_ebay_settings_by_store_id_put ...'
      end
      # verify the required parameter 'store_id' is set
      if @api_client.config.client_side_validation && store_id.nil?
        fail ArgumentError, "Missing the required parameter 'store_id' when calling MarketplaceAccountsApi.v_beta_connections_marketplaces_ebay_settings_by_store_id_put"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling MarketplaceAccountsApi.v_beta_connections_marketplaces_ebay_settings_by_store_id_put"
      end
      # resource path
      local_var_path = '/v-beta/connections/marketplaces/ebay/{store_id}/settings'.sub('{' + 'store_id' + '}', store_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['api-key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MarketplaceAccountsApi#v_beta_connections_marketplaces_ebay_settings_by_store_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # ebay_account.test
    # 
    # @param store_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def v_beta_connections_marketplaces_ebay_test_by_store_id_get(store_id, opts = {})
      v_beta_connections_marketplaces_ebay_test_by_store_id_get_with_http_info(store_id, opts)
      nil
    end

    # ebay_account.test
    # 
    # @param store_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def v_beta_connections_marketplaces_ebay_test_by_store_id_get_with_http_info(store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MarketplaceAccountsApi.v_beta_connections_marketplaces_ebay_test_by_store_id_get ...'
      end
      # verify the required parameter 'store_id' is set
      if @api_client.config.client_side_validation && store_id.nil?
        fail ArgumentError, "Missing the required parameter 'store_id' when calling MarketplaceAccountsApi.v_beta_connections_marketplaces_ebay_test_by_store_id_get"
      end
      # resource path
      local_var_path = '/v-beta/connections/marketplaces/ebay/{store_id}/test'.sub('{' + 'store_id' + '}', store_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api-key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MarketplaceAccountsApi#v_beta_connections_marketplaces_ebay_test_by_store_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # etsy_account.connect
    # 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [ConnectMarketplaceResponseBody]
    def v_beta_connections_marketplaces_etsy_access_token_post(body, opts = {})
      data, _status_code, _headers = v_beta_connections_marketplaces_etsy_access_token_post_with_http_info(body, opts)
      data
    end

    # etsy_account.connect
    # 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConnectMarketplaceResponseBody, Fixnum, Hash)>] ConnectMarketplaceResponseBody data, response status code and response headers
    def v_beta_connections_marketplaces_etsy_access_token_post_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MarketplaceAccountsApi.v_beta_connections_marketplaces_etsy_access_token_post ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling MarketplaceAccountsApi.v_beta_connections_marketplaces_etsy_access_token_post"
      end
      # resource path
      local_var_path = '/v-beta/connections/marketplaces/etsy/access_token'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['api-key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ConnectMarketplaceResponseBody')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MarketplaceAccountsApi#v_beta_connections_marketplaces_etsy_access_token_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # etsy_account.deactivate
    # 
    # @param store_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def v_beta_connections_marketplaces_etsy_deactivate_by_store_id_put(store_id, opts = {})
      v_beta_connections_marketplaces_etsy_deactivate_by_store_id_put_with_http_info(store_id, opts)
      nil
    end

    # etsy_account.deactivate
    # 
    # @param store_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def v_beta_connections_marketplaces_etsy_deactivate_by_store_id_put_with_http_info(store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MarketplaceAccountsApi.v_beta_connections_marketplaces_etsy_deactivate_by_store_id_put ...'
      end
      # verify the required parameter 'store_id' is set
      if @api_client.config.client_side_validation && store_id.nil?
        fail ArgumentError, "Missing the required parameter 'store_id' when calling MarketplaceAccountsApi.v_beta_connections_marketplaces_etsy_deactivate_by_store_id_put"
      end
      # resource path
      local_var_path = '/v-beta/connections/marketplaces/etsy/{store_id}/deactivate'.sub('{' + 'store_id' + '}', store_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api-key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MarketplaceAccountsApi#v_beta_connections_marketplaces_etsy_deactivate_by_store_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # etsy_account.reactivate
    # 
    # @param store_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def v_beta_connections_marketplaces_etsy_reactivate_by_store_id_put(store_id, opts = {})
      v_beta_connections_marketplaces_etsy_reactivate_by_store_id_put_with_http_info(store_id, opts)
      nil
    end

    # etsy_account.reactivate
    # 
    # @param store_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def v_beta_connections_marketplaces_etsy_reactivate_by_store_id_put_with_http_info(store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MarketplaceAccountsApi.v_beta_connections_marketplaces_etsy_reactivate_by_store_id_put ...'
      end
      # verify the required parameter 'store_id' is set
      if @api_client.config.client_side_validation && store_id.nil?
        fail ArgumentError, "Missing the required parameter 'store_id' when calling MarketplaceAccountsApi.v_beta_connections_marketplaces_etsy_reactivate_by_store_id_put"
      end
      # resource path
      local_var_path = '/v-beta/connections/marketplaces/etsy/{store_id}/reactivate'.sub('{' + 'store_id' + '}', store_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api-key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MarketplaceAccountsApi#v_beta_connections_marketplaces_etsy_reactivate_by_store_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # etsy_account.update_settings
    # 
    # @param store_id 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def v_beta_connections_marketplaces_etsy_settings_by_store_id_put(store_id, body, opts = {})
      v_beta_connections_marketplaces_etsy_settings_by_store_id_put_with_http_info(store_id, body, opts)
      nil
    end

    # etsy_account.update_settings
    # 
    # @param store_id 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def v_beta_connections_marketplaces_etsy_settings_by_store_id_put_with_http_info(store_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MarketplaceAccountsApi.v_beta_connections_marketplaces_etsy_settings_by_store_id_put ...'
      end
      # verify the required parameter 'store_id' is set
      if @api_client.config.client_side_validation && store_id.nil?
        fail ArgumentError, "Missing the required parameter 'store_id' when calling MarketplaceAccountsApi.v_beta_connections_marketplaces_etsy_settings_by_store_id_put"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling MarketplaceAccountsApi.v_beta_connections_marketplaces_etsy_settings_by_store_id_put"
      end
      # resource path
      local_var_path = '/v-beta/connections/marketplaces/etsy/{store_id}/settings'.sub('{' + 'store_id' + '}', store_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['api-key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MarketplaceAccountsApi#v_beta_connections_marketplaces_etsy_settings_by_store_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # etsy_account.test
    # 
    # @param store_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def v_beta_connections_marketplaces_etsy_test_by_store_id_get(store_id, opts = {})
      v_beta_connections_marketplaces_etsy_test_by_store_id_get_with_http_info(store_id, opts)
      nil
    end

    # etsy_account.test
    # 
    # @param store_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def v_beta_connections_marketplaces_etsy_test_by_store_id_get_with_http_info(store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MarketplaceAccountsApi.v_beta_connections_marketplaces_etsy_test_by_store_id_get ...'
      end
      # verify the required parameter 'store_id' is set
      if @api_client.config.client_side_validation && store_id.nil?
        fail ArgumentError, "Missing the required parameter 'store_id' when calling MarketplaceAccountsApi.v_beta_connections_marketplaces_etsy_test_by_store_id_get"
      end
      # resource path
      local_var_path = '/v-beta/connections/marketplaces/etsy/{store_id}/test'.sub('{' + 'store_id' + '}', store_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api-key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MarketplaceAccountsApi#v_beta_connections_marketplaces_etsy_test_by_store_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # magento_account.deactivate
    # 
    # @param store_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def v_beta_connections_marketplaces_magento_deactivate_by_store_id_put(store_id, opts = {})
      v_beta_connections_marketplaces_magento_deactivate_by_store_id_put_with_http_info(store_id, opts)
      nil
    end

    # magento_account.deactivate
    # 
    # @param store_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def v_beta_connections_marketplaces_magento_deactivate_by_store_id_put_with_http_info(store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MarketplaceAccountsApi.v_beta_connections_marketplaces_magento_deactivate_by_store_id_put ...'
      end
      # verify the required parameter 'store_id' is set
      if @api_client.config.client_side_validation && store_id.nil?
        fail ArgumentError, "Missing the required parameter 'store_id' when calling MarketplaceAccountsApi.v_beta_connections_marketplaces_magento_deactivate_by_store_id_put"
      end
      # resource path
      local_var_path = '/v-beta/connections/marketplaces/magento/{store_id}/deactivate'.sub('{' + 'store_id' + '}', store_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api-key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MarketplaceAccountsApi#v_beta_connections_marketplaces_magento_deactivate_by_store_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # magento_account.connect
    # 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [ConnectMarketplaceResponseBody]
    def v_beta_connections_marketplaces_magento_post(body, opts = {})
      data, _status_code, _headers = v_beta_connections_marketplaces_magento_post_with_http_info(body, opts)
      data
    end

    # magento_account.connect
    # 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConnectMarketplaceResponseBody, Fixnum, Hash)>] ConnectMarketplaceResponseBody data, response status code and response headers
    def v_beta_connections_marketplaces_magento_post_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MarketplaceAccountsApi.v_beta_connections_marketplaces_magento_post ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling MarketplaceAccountsApi.v_beta_connections_marketplaces_magento_post"
      end
      # resource path
      local_var_path = '/v-beta/connections/marketplaces/magento'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['api-key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ConnectMarketplaceResponseBody')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MarketplaceAccountsApi#v_beta_connections_marketplaces_magento_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # magento_account.reactivate
    # 
    # @param store_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def v_beta_connections_marketplaces_magento_reactivate_by_store_id_put(store_id, opts = {})
      v_beta_connections_marketplaces_magento_reactivate_by_store_id_put_with_http_info(store_id, opts)
      nil
    end

    # magento_account.reactivate
    # 
    # @param store_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def v_beta_connections_marketplaces_magento_reactivate_by_store_id_put_with_http_info(store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MarketplaceAccountsApi.v_beta_connections_marketplaces_magento_reactivate_by_store_id_put ...'
      end
      # verify the required parameter 'store_id' is set
      if @api_client.config.client_side_validation && store_id.nil?
        fail ArgumentError, "Missing the required parameter 'store_id' when calling MarketplaceAccountsApi.v_beta_connections_marketplaces_magento_reactivate_by_store_id_put"
      end
      # resource path
      local_var_path = '/v-beta/connections/marketplaces/magento/{store_id}/reactivate'.sub('{' + 'store_id' + '}', store_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api-key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MarketplaceAccountsApi#v_beta_connections_marketplaces_magento_reactivate_by_store_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # magento_account.update_settings
    # 
    # @param store_id 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def v_beta_connections_marketplaces_magento_settings_by_store_id_put(store_id, body, opts = {})
      v_beta_connections_marketplaces_magento_settings_by_store_id_put_with_http_info(store_id, body, opts)
      nil
    end

    # magento_account.update_settings
    # 
    # @param store_id 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def v_beta_connections_marketplaces_magento_settings_by_store_id_put_with_http_info(store_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MarketplaceAccountsApi.v_beta_connections_marketplaces_magento_settings_by_store_id_put ...'
      end
      # verify the required parameter 'store_id' is set
      if @api_client.config.client_side_validation && store_id.nil?
        fail ArgumentError, "Missing the required parameter 'store_id' when calling MarketplaceAccountsApi.v_beta_connections_marketplaces_magento_settings_by_store_id_put"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling MarketplaceAccountsApi.v_beta_connections_marketplaces_magento_settings_by_store_id_put"
      end
      # resource path
      local_var_path = '/v-beta/connections/marketplaces/magento/{store_id}/settings'.sub('{' + 'store_id' + '}', store_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['api-key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MarketplaceAccountsApi#v_beta_connections_marketplaces_magento_settings_by_store_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # magento_account.test
    # 
    # @param store_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def v_beta_connections_marketplaces_magento_test_by_store_id_get(store_id, opts = {})
      v_beta_connections_marketplaces_magento_test_by_store_id_get_with_http_info(store_id, opts)
      nil
    end

    # magento_account.test
    # 
    # @param store_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def v_beta_connections_marketplaces_magento_test_by_store_id_get_with_http_info(store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MarketplaceAccountsApi.v_beta_connections_marketplaces_magento_test_by_store_id_get ...'
      end
      # verify the required parameter 'store_id' is set
      if @api_client.config.client_side_validation && store_id.nil?
        fail ArgumentError, "Missing the required parameter 'store_id' when calling MarketplaceAccountsApi.v_beta_connections_marketplaces_magento_test_by_store_id_get"
      end
      # resource path
      local_var_path = '/v-beta/connections/marketplaces/magento/{store_id}/test'.sub('{' + 'store_id' + '}', store_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api-key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MarketplaceAccountsApi#v_beta_connections_marketplaces_magento_test_by_store_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # shopify_account.connect_access_token
    # 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [ConnectMarketplaceResponseBody]
    def v_beta_connections_marketplaces_shopify_access_token_post(body, opts = {})
      data, _status_code, _headers = v_beta_connections_marketplaces_shopify_access_token_post_with_http_info(body, opts)
      data
    end

    # shopify_account.connect_access_token
    # 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConnectMarketplaceResponseBody, Fixnum, Hash)>] ConnectMarketplaceResponseBody data, response status code and response headers
    def v_beta_connections_marketplaces_shopify_access_token_post_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MarketplaceAccountsApi.v_beta_connections_marketplaces_shopify_access_token_post ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling MarketplaceAccountsApi.v_beta_connections_marketplaces_shopify_access_token_post"
      end
      # resource path
      local_var_path = '/v-beta/connections/marketplaces/shopify/access_token'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['api-key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ConnectMarketplaceResponseBody')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MarketplaceAccountsApi#v_beta_connections_marketplaces_shopify_access_token_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # shopify_account.deactivate
    # 
    # @param store_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def v_beta_connections_marketplaces_shopify_deactivate_by_store_id_put(store_id, opts = {})
      v_beta_connections_marketplaces_shopify_deactivate_by_store_id_put_with_http_info(store_id, opts)
      nil
    end

    # shopify_account.deactivate
    # 
    # @param store_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def v_beta_connections_marketplaces_shopify_deactivate_by_store_id_put_with_http_info(store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MarketplaceAccountsApi.v_beta_connections_marketplaces_shopify_deactivate_by_store_id_put ...'
      end
      # verify the required parameter 'store_id' is set
      if @api_client.config.client_side_validation && store_id.nil?
        fail ArgumentError, "Missing the required parameter 'store_id' when calling MarketplaceAccountsApi.v_beta_connections_marketplaces_shopify_deactivate_by_store_id_put"
      end
      # resource path
      local_var_path = '/v-beta/connections/marketplaces/shopify/{store_id}/deactivate'.sub('{' + 'store_id' + '}', store_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api-key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MarketplaceAccountsApi#v_beta_connections_marketplaces_shopify_deactivate_by_store_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # shopify_account.reactivate
    # 
    # @param store_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def v_beta_connections_marketplaces_shopify_reactivate_by_store_id_put(store_id, opts = {})
      v_beta_connections_marketplaces_shopify_reactivate_by_store_id_put_with_http_info(store_id, opts)
      nil
    end

    # shopify_account.reactivate
    # 
    # @param store_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def v_beta_connections_marketplaces_shopify_reactivate_by_store_id_put_with_http_info(store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MarketplaceAccountsApi.v_beta_connections_marketplaces_shopify_reactivate_by_store_id_put ...'
      end
      # verify the required parameter 'store_id' is set
      if @api_client.config.client_side_validation && store_id.nil?
        fail ArgumentError, "Missing the required parameter 'store_id' when calling MarketplaceAccountsApi.v_beta_connections_marketplaces_shopify_reactivate_by_store_id_put"
      end
      # resource path
      local_var_path = '/v-beta/connections/marketplaces/shopify/{store_id}/reactivate'.sub('{' + 'store_id' + '}', store_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api-key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MarketplaceAccountsApi#v_beta_connections_marketplaces_shopify_reactivate_by_store_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # shopify_account.update_settings
    # 
    # @param store_id 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def v_beta_connections_marketplaces_shopify_settings_by_store_id_put(store_id, body, opts = {})
      v_beta_connections_marketplaces_shopify_settings_by_store_id_put_with_http_info(store_id, body, opts)
      nil
    end

    # shopify_account.update_settings
    # 
    # @param store_id 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def v_beta_connections_marketplaces_shopify_settings_by_store_id_put_with_http_info(store_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MarketplaceAccountsApi.v_beta_connections_marketplaces_shopify_settings_by_store_id_put ...'
      end
      # verify the required parameter 'store_id' is set
      if @api_client.config.client_side_validation && store_id.nil?
        fail ArgumentError, "Missing the required parameter 'store_id' when calling MarketplaceAccountsApi.v_beta_connections_marketplaces_shopify_settings_by_store_id_put"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling MarketplaceAccountsApi.v_beta_connections_marketplaces_shopify_settings_by_store_id_put"
      end
      # resource path
      local_var_path = '/v-beta/connections/marketplaces/shopify/{store_id}/settings'.sub('{' + 'store_id' + '}', store_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['api-key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MarketplaceAccountsApi#v_beta_connections_marketplaces_shopify_settings_by_store_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # shopify_account.test
    # 
    # @param store_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def v_beta_connections_marketplaces_shopify_test_by_store_id_get(store_id, opts = {})
      v_beta_connections_marketplaces_shopify_test_by_store_id_get_with_http_info(store_id, opts)
      nil
    end

    # shopify_account.test
    # 
    # @param store_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def v_beta_connections_marketplaces_shopify_test_by_store_id_get_with_http_info(store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MarketplaceAccountsApi.v_beta_connections_marketplaces_shopify_test_by_store_id_get ...'
      end
      # verify the required parameter 'store_id' is set
      if @api_client.config.client_side_validation && store_id.nil?
        fail ArgumentError, "Missing the required parameter 'store_id' when calling MarketplaceAccountsApi.v_beta_connections_marketplaces_shopify_test_by_store_id_get"
      end
      # resource path
      local_var_path = '/v-beta/connections/marketplaces/shopify/{store_id}/test'.sub('{' + 'store_id' + '}', store_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api-key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MarketplaceAccountsApi#v_beta_connections_marketplaces_shopify_test_by_store_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
