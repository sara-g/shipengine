=begin
#ShipEngine API

#ShipEngine™ is the world's best multi-carrier shipping API, with more than 20 supported shipping carriers.  You can easily get and compare shipping rates, print labels, track your shipments, and validate addresses anywhere in the world.  ### Worldwide Major Carrier Support Access the top global carriers in minutes—instead of weeks. Simply [connect your existing carrier accounts](https://docs.shipengine.com/docs/setup-a-carrier) in the API dashboard, and then [begin creating labels](https://docs.shipengine.com/docs/use-a-specific-service).  ### Real-Time Tracking [Track packages](https://docs.shipengine.com/docs/track-a-package) across any of our 20+ supported carrier accounts and create tracking events to keep your customers up-to-date. Easily integrate real-time tracking information for shipments into your app, email, or SMS.  ### Get Rates Across Carriers Make sure you ship as cost-effectively as possible by [quickly comparing rates](https://docs.shipengine.com/docs/get-shipping-rates) using the ShipEngine Rates API. As long as you have the carrier connected to your account, you'll be able to see and compare different rates and services.  ### Global Address Validation No matter your shipping volume, failed deliveries and address change surcharges cut into your bottom line and damage perception with customers. Our address validation services ensure your packages make it to the right place the first time. [Learn how to leverage our address validation services here.](https://docs.shipengine.com/docs/address-validation)  ShipEngine supports address validation for over 180 countries, including the United States, Canada, Great Britain, Australia, Germany, France, Norway, Spain, Sweden, Israel, Italy, and more. 

OpenAPI spec version: 1.0.0
Contact: sales@shipengine.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.0-SNAPSHOT

=end

require 'date'

module ShipEngineApi
  class AdvancedOptions
    attr_accessor :bill_to_account

    attr_accessor :bill_to_country_code

    attr_accessor :bill_to_party

    attr_accessor :bill_to_postal_code

    attr_accessor :contains_alcohol

    attr_accessor :delivered_duty_paid

    attr_accessor :non_machinable

    attr_accessor :saturday_delivery

    attr_accessor :use_ups_ground_freight_pricing

    attr_accessor :freight_class

    attr_accessor :custom_field1

    attr_accessor :custom_field2

    attr_accessor :custom_field3

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'bill_to_account' => :'bill_to_account',
        :'bill_to_country_code' => :'bill_to_country_code',
        :'bill_to_party' => :'bill_to_party',
        :'bill_to_postal_code' => :'bill_to_postal_code',
        :'contains_alcohol' => :'contains_alcohol',
        :'delivered_duty_paid' => :'delivered_duty_paid',
        :'non_machinable' => :'non_machinable',
        :'saturday_delivery' => :'saturday_delivery',
        :'use_ups_ground_freight_pricing' => :'use_ups_ground_freight_pricing',
        :'freight_class' => :'freight_class',
        :'custom_field1' => :'custom_field1',
        :'custom_field2' => :'custom_field2',
        :'custom_field3' => :'custom_field3'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'bill_to_account' => :'String',
        :'bill_to_country_code' => :'String',
        :'bill_to_party' => :'BillToParty',
        :'bill_to_postal_code' => :'String',
        :'contains_alcohol' => :'BOOLEAN',
        :'delivered_duty_paid' => :'BOOLEAN',
        :'non_machinable' => :'BOOLEAN',
        :'saturday_delivery' => :'BOOLEAN',
        :'use_ups_ground_freight_pricing' => :'BOOLEAN',
        :'freight_class' => :'String',
        :'custom_field1' => :'String',
        :'custom_field2' => :'String',
        :'custom_field3' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'bill_to_account')
        self.bill_to_account = attributes[:'bill_to_account']
      end

      if attributes.has_key?(:'bill_to_country_code')
        self.bill_to_country_code = attributes[:'bill_to_country_code']
      end

      if attributes.has_key?(:'bill_to_party')
        self.bill_to_party = attributes[:'bill_to_party']
      end

      if attributes.has_key?(:'bill_to_postal_code')
        self.bill_to_postal_code = attributes[:'bill_to_postal_code']
      end

      if attributes.has_key?(:'contains_alcohol')
        self.contains_alcohol = attributes[:'contains_alcohol']
      end

      if attributes.has_key?(:'delivered_duty_paid')
        self.delivered_duty_paid = attributes[:'delivered_duty_paid']
      end

      if attributes.has_key?(:'non_machinable')
        self.non_machinable = attributes[:'non_machinable']
      end

      if attributes.has_key?(:'saturday_delivery')
        self.saturday_delivery = attributes[:'saturday_delivery']
      end

      if attributes.has_key?(:'use_ups_ground_freight_pricing')
        self.use_ups_ground_freight_pricing = attributes[:'use_ups_ground_freight_pricing']
      end

      if attributes.has_key?(:'freight_class')
        self.freight_class = attributes[:'freight_class']
      end

      if attributes.has_key?(:'custom_field1')
        self.custom_field1 = attributes[:'custom_field1']
      end

      if attributes.has_key?(:'custom_field2')
        self.custom_field2 = attributes[:'custom_field2']
      end

      if attributes.has_key?(:'custom_field3')
        self.custom_field3 = attributes[:'custom_field3']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          bill_to_account == o.bill_to_account &&
          bill_to_country_code == o.bill_to_country_code &&
          bill_to_party == o.bill_to_party &&
          bill_to_postal_code == o.bill_to_postal_code &&
          contains_alcohol == o.contains_alcohol &&
          delivered_duty_paid == o.delivered_duty_paid &&
          non_machinable == o.non_machinable &&
          saturday_delivery == o.saturday_delivery &&
          use_ups_ground_freight_pricing == o.use_ups_ground_freight_pricing &&
          freight_class == o.freight_class &&
          custom_field1 == o.custom_field1 &&
          custom_field2 == o.custom_field2 &&
          custom_field3 == o.custom_field3
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [bill_to_account, bill_to_country_code, bill_to_party, bill_to_postal_code, contains_alcohol, delivered_duty_paid, non_machinable, saturday_delivery, use_ups_ground_freight_pricing, freight_class, custom_field1, custom_field2, custom_field3].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = ShipEngineApi.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
